//initial state
initialCheckWalk
//blank character
b

//check to see if the second num is already 0 before proceeding
initialCheckWalk, 0, initialCheckWalk, 0, r
initialCheckWalk, 1, initialCheckWalk, 1, r
initialCheckWalk, #, initialCheckWalk, #, r
initialCheckWalk, b, checkIfDone, b, l

//subtract one from the first num
num1.firstOnesComp, 0, num1.firstOnesComp, 1, r
num1.firstOnesComp, 1, num1.firstOnesComp, 0, r
num1.firstOnesComp, #, num1.subAddOne, #, l
num1.subAddOne, 0, num1.subWalkLeft, 1, l
num1.subAddOne, 1, num1.subAddOne, 0, l
num1.subAddOne, b, num1.secondOnesComp, b, r
num1.subWalkLeft, 0, num1.subWalkLeft, 0, l
num1.subWalkLeft, 1, num1.subWalkLeft, 1, l
num1.subWalkLeft, b, num1.secondOnesComp, b, r
num1.secondOnesComp, 0, num1.secondOnesComp, 1, r
num1.secondOnesComp, 1, num1.secondOnesComp, 0, r
num1.secondOnesComp, #, num2.firstOnesComp, #, r

//subtract one from the second num
num2.firstOnesComp, 0, num2.firstOnesComp, 1, r
num2.firstOnesComp, 1, num2.firstOnesComp, 0, r
num2.firstOnesComp, b, num2.subAddOne, b, l
num2.subAddOne, 0, num2.subWalkLeft, 1, l
num2.subAddOne, 1, num2.subAddOne, 0, l
num2.subAddOne, #, num2.subWalkLeft, #, l
num2.subWalkLeft, 0, num2.subWalkLeft, 0, l
num2.subWalkLeft, 1, num2.subWalkLeft, 1, l
num2.subWalkLeft, #, num2.secondOnesComp, #, r
num2.secondOnesComp, 0, num2.secondOnesComp, 1, r
num2.secondOnesComp, 1, num2.secondOnesComp, 0, r
num2.secondOnesComp, b, checkIfDone, b, l

//check to see if the second num is zero. If so, we are done! Otherwise, repeat the procedure
checkIfDone, 0, checkIfDone, 0, l
checkIfDone, 1, reset, 1, l
checkIfDone, #, done, #, r
reset, 0, reset, 0, l
reset, 1, reset, 1, l
reset, #, reset, #, l
reset, b, num1.firstOnesComp, b, r